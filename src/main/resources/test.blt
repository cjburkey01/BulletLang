/#

class Person {
    def _(firstName of String, lastName of String) {
        @@people = @@people + 1;
        
        @firstName := firstName;
        @lastName := lastName;
    }
    
    def firstName {
        @firstName
    }
    
    def lastName {
        @lastName
    }
    
    def fullName {
        @"#{firstName} #{lastName}";
    }
    
    def greeting {
        @"Hello #{fullName}"
    }
    
    def +(other of Person) {
        @"#{fullName} and #{other.fullName}"
    }
    
    def -(other of Person) {
        @"#{fullName} without #{other.fullName}"
    }
    
    def *(other of Person) {
        @"#{fullName} married to #{other.fullName}"
    }
    
    def /(other of Person) {
        @"#{fullName} divorced with #{other.fullName}"
    }
    
    def **(other of Person) {
        @"#{fullName}'s child with #{other.fullName}"
    }
    
    def - {
        @"Deceased #{fullName}"
    }
}

bob := Person.new "Bob", "Johnson";

print bob.greeting;         # Prints `Hello Bob Johnson`

sue := Person.new "Sue", "Timmy";

print bob + sue;        # Prints `Bob Johnson and Sue Timmy`
print bob - sue;        # Prints `Bob Johnson without Sue Timmy`
print bob * sue;        # Prints `Bob Johnson married to Sue Timmy`
print bob / sue;        # Prints `Bob Johnson divorced Sue Timmy`
print bob ** sue;       # Prints `Bob Johnson's child with Sue Timmy`
print (-bob);           # Prints `Deceased Bob Johnson` (Parenthesis required because `print` would be mistaked for a term)
print sue - -bob;       # Prints `Sue Timmy without Deceased Bob Johnson`

# You can directly call operator methods too (though there is no reason to do so):
print bob.+(sue);


# One possible reason to use the method call would be to avoid parenthesis:
print bob.-;    # Instead of `print (-bob);`

:arrayTest of Int32[];
arrayTest = { 5, 4, 3, 2, 1 };

#/

class Bob {
    let @@bobs of Int32;
    def _(name of String) {
        @@bobs = @@bobs + 1;
        let @name = name;
    }
    def greet() {
        print @"Hello, #{@name}!";
    }
}

class Bob {
    def _(age of Int32) {
        let @age = age;
    }
    def greet(msg of String) {
        print @"#{msg}, #{@name}, #{@age}!";
    }
}

# Until the standard library is added, this is required for test calls to be valid
class Int32 { def +(other of Int32) of Int32 {} }
def print(msg of String) {}
