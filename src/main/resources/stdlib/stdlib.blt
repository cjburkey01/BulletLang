# This namespace will be included automatically in all scopes.
# Everything absolutely *required* will be included, such as
# primitive types like Int8, Int16, Int32, Int64, Float32, Float64,
# String, and Char.
namespace StdLib {
    # Byte natives
    def native pow(a of Int8, b of Int8) of Int8;
    def native root(a of Int8, b of Int8) of Int8;
    def native times(a of Int8, b of Int8) of Int8;
    def native div(a of Int8, b of Int8) of Int8;
    def native plus(a of Int8, b of Int8) of Int8;
    def native minus(a of Int8, b of Int8) of Int8;
    def native negate(a of Int8) of Int8;
    def native bitAnd(a of Int8, b of Int8) of Int8;
    def native bitOr(a of Int8, b of Int8) of Int8;
    def native bitXOr(a of Int8, b of Int8) of Int8;
    def native bitNot(a of Int8, b of Int8) of Int8;
    def native bitRight(a of Int8, b of Int8) of Int8;
    def native bitLeft(a of Int8, b of Int8) of Int8;
    def native equal(a of Int8, b of Int8) of Boolean;
    def native notEqual(a of Int8, b of Int8) of Boolean;
    def native greater(a of Int8, b of Int8) of Boolean;
    def native greaterEqual(a of Int8, b of Int8) of Boolean;
    def native less(a of Int8, b of Int8) of Boolean;
    def native lessEqual(a of Int8, b of Int8) of Boolean;
    
    # UByte natives
    def native pow(a of UInt8, b of UInt8) of UInt8;
    def native root(a of UInt8, b of UInt8) of UInt8;
    def native times(a of UInt8, b of UInt8) of UInt8;
    def native div(a of UInt8, b of UInt8) of UInt8;
    def native plus(a of UInt8, b of UInt8) of UInt8;
    def native minus(a of UInt8, b of UInt8) of UInt8;
    def native negate(a of UInt8) of UInt8;
    def native bitAnd(a of UInt8, b of UInt8) of UInt8;
    def native bitOr(a of UInt8, b of UInt8) of UInt8;
    def native bitXOr(a of UInt8, b of UInt8) of UInt8;
    def native bitNot(a of UInt8, b of UInt8) of UInt8;
    def native bitRight(a of UInt8, b of UInt8) of UInt8;
    def native bitLeft(a of UInt8, b of UInt8) of UInt8;
    def native equal(a of UInt8, b of UInt8) of Boolean;
    def native notEqual(a of UInt8, b of UInt8) of Boolean;
    def native greater(a of UInt8, b of UInt8) of Boolean;
    def native greaterEqual(a of UInt8, b of UInt8) of Boolean;
    def native less(a of UInt8, b of UInt8) of Boolean;
    def native lessEqual(a of UInt8, b of UInt8) of Boolean;
    
    # Short natives
    def native pow(a of Int16, b of Int16) of Int16;
    def native root(a of Int16, b of Int16) of Int16;
    def native times(a of Int16, b of Int16) of Int16;
    def native div(a of Int16, b of Int16) of Int16;
    def native plus(a of Int16, b of Int16) of Int16;
    def native minus(a of Int16, b of Int16) of Int16;
    def native negate(a of Int16) of Int16;
    def native bitAnd(a of Int16, b of Int16) of Int16;
    def native bitOr(a of Int16, b of Int16) of Int16;
    def native bitXOr(a of Int16, b of Int16) of Int16;
    def native bitNot(a of Int16, b of Int16) of Int16;
    def native bitRight(a of Int16, b of Int16) of Int16;
    def native bitLeft(a of Int16, b of Int16) of Int16;
    def native equal(a of Int16, b of Int16) of Boolean;
    def native notEqual(a of Int16, b of Int16) of Boolean;
    def native greater(a of Int16, b of Int16) of Boolean;
    def native greaterEqual(a of Int16, b of Int16) of Boolean;
    def native less(a of Int16, b of Int16) of Boolean;
    def native lessEqual(a of Int16, b of Int16) of Boolean;
    
    # UShort natives
    def native pow(a of UInt16, b of UInt16) of UInt16;
    def native root(a of UInt16, b of UInt16) of UInt16;
    def native times(a of UInt16, b of UInt16) of UInt16;
    def native div(a of UInt16, b of UInt16) of UInt16;
    def native plus(a of UInt16, b of UInt16) of UInt16;
    def native minus(a of UInt16, b of UInt16) of UInt16;
    def native negate(a of UInt16) of UInt16;
    def native bitAnd(a of UInt16, b of UInt16) of UInt16;
    def native bitOr(a of UInt16, b of UInt16) of UInt16;
    def native bitXOr(a of UInt16, b of UInt16) of UInt16;
    def native bitNot(a of UInt16, b of UInt16) of UInt16;
    def native bitRight(a of UInt16, b of UInt16) of UInt16;
    def native bitLeft(a of UInt16, b of UInt16) of UInt16;
    def native equal(a of UInt16, b of UInt16) of Boolean;
    def native notEqual(a of UInt16, b of UInt16) of Boolean;
    def native greater(a of UInt16, b of UInt16) of Boolean;
    def native greaterEqual(a of UInt16, b of UInt16) of Boolean;
    def native less(a of UInt16, b of UInt16) of Boolean;
    def native lessEqual(a of UInt16, b of UInt16) of Boolean;
    
    # Int natives
    def native pow(a of Int32, b of Int32) of Int32;
    def native root(a of Int32, b of Int32) of Int32;
    def native times(a of Int32, b of Int32) of Int32;
    def native div(a of Int32, b of Int32) of Int32;
    def native plus(a of Int32, b of Int32) of Int32;
    def native minus(a of Int32, b of Int32) of Int32;
    def native negate(a of Int32) of Int32;
    def native bitAnd(a of Int32, b of Int32) of Int32;
    def native bitOr(a of Int32, b of Int32) of Int32;
    def native bitXOr(a of Int32, b of Int32) of Int32;
    def native bitNot(a of Int32, b of Int32) of Int32;
    def native bitRight(a of Int32, b of Int32) of Int32;
    def native bitLeft(a of Int32, b of Int32) of Int32;
    def native equal(a of Int32, b of Int32) of Boolean;
    def native notEqual(a of Int32, b of Int32) of Boolean;
    def native greater(a of Int32, b of Int32) of Boolean;
    def native greaterEqual(a of Int32, b of Int32) of Boolean;
    def native less(a of Int32, b of Int32) of Boolean;
    def native lessEqual(a of Int32, b of Int32) of Boolean;
    
    # UInt natives
    def native pow(a of UInt32, b of UInt32) of UInt32;
    def native root(a of UInt32, b of UInt32) of UInt32;
    def native times(a of UInt32, b of UInt32) of UInt32;
    def native div(a of UInt32, b of UInt32) of UInt32;
    def native plus(a of UInt32, b of UInt32) of UInt32;
    def native minus(a of UInt32, b of UInt32) of UInt32;
    def native negate(a of UInt32) of UInt32;
    def native bitAnd(a of UInt32, b of UInt32) of UInt32;
    def native bitOr(a of UInt32, b of UInt32) of UInt32;
    def native bitXOr(a of UInt32, b of UInt32) of UInt32;
    def native bitNot(a of UInt32, b of UInt32) of UInt32;
    def native bitRight(a of UInt32, b of UInt32) of UInt32;
    def native bitLeft(a of UInt32, b of UInt32) of UInt32;
    def native equal(a of UInt32, b of UInt32) of Boolean;
    def native notEqual(a of UInt32, b of UInt32) of Boolean;
    def native greater(a of UInt32, b of UInt32) of Boolean;
    def native greaterEqual(a of UInt32, b of UInt32) of Boolean;
    def native less(a of UInt32, b of UInt32) of Boolean;
    def native lessEqual(a of UInt32, b of UInt32) of Boolean;
    
    # Long natives
    def native pow(a of Int64, b of Int64) of Int64;
    def native root(a of Int64, b of Int64) of Int64;
    def native times(a of Int64, b of Int64) of Int64;
    def native div(a of Int64, b of Int64) of Int64;
    def native plus(a of Int64, b of Int64) of Int64;
    def native minus(a of Int64, b of Int64) of Int64;
    def native negate(a of Int64) of Int64;
    def native bitAnd(a of Int64, b of Int64) of Int64;
    def native bitOr(a of Int64, b of Int64) of Int64;
    def native bitXOr(a of Int64, b of Int64) of Int64;
    def native bitNot(a of Int64, b of Int64) of Int64;
    def native bitRight(a of Int64, b of Int64) of Int64;
    def native bitLeft(a of Int64, b of Int64) of Int64;
    def native equal(a of Int64, b of Int64) of Boolean;
    def native notEqual(a of Int64, b of Int64) of Boolean;
    def native greater(a of Int64, b of Int64) of Boolean;
    def native greaterEqual(a of Int64, b of Int64) of Boolean;
    def native less(a of Int64, b of Int64) of Boolean;
    def native lessEqual(a of Int64, b of Int64) of Boolean;
    
    # ULong natives
    def native pow(a of UInt64, b of UInt64) of UInt64;
    def native root(a of UInt64, b of UInt64) of UInt64;
    def native times(a of UInt64, b of UInt64) of UInt64;
    def native div(a of UInt64, b of UInt64) of UInt64;
    def native plus(a of UInt64, b of UInt64) of UInt64;
    def native minus(a of UInt64, b of UInt64) of UInt64;
    def native negate(a of UInt64) of UInt64;
    def native bitAnd(a of UInt64, b of UInt64) of UInt64;
    def native bitOr(a of UInt64, b of UInt64) of UInt64;
    def native bitXOr(a of UInt64, b of UInt64) of UInt64;
    def native bitNot(a of UInt64, b of UInt64) of UInt64;
    def native bitRight(a of UInt64, b of UInt64) of UInt64;
    def native bitLeft(a of UInt64, b of UInt64) of UInt64;
    def native equal(a of UInt64, b of UInt64) of Boolean;
    def native notEqual(a of UInt64, b of UInt64) of Boolean;
    def native greater(a of UInt64, b of UInt64) of Boolean;
    def native greaterEqual(a of UInt64, b of UInt64) of Boolean;
    def native less(a of UInt64, b of UInt64) of Boolean;
    def native lessEqual(a of UInt64, b of UInt64) of Boolean;
    
    # Byte
    value Int8 native int8_t {
        def **(b of Int8) { pow(@this, b) }
        def //(b of Int8) { root(@this, b) }
        def *(b of Int8) { times(@this, b) }
        def /(b of Int8) { div(@this, b) }
        def +(b of Int8) { plus(@this, b) }
        def -(b of Int8) { minus(@this, b) }
        def -() { negate(@this) }
        def &(b of Int8) { bitAnd(@this, b) }
        def |(b of Int8) { bitOr(@this, b) }
        def ^(b of Int8) { bitXOr(@this, b) }
        def ~(b of Int8) { bitNot(@this, b) }
        def >>(b of Int8) { bitRight(@this, b) }
        def <<(b of Int8) { bitLeft(@this, b) }
        def ==(b of Int8) { equal(@this, b) }
        def !=(b of Int8) { notEqual(@this, b) }
        def >(b of Int8) { greater(@this, b) }
        def >=(b of Int8) { greaterEqual(@this, b) }
        def <(b of Int8) { less(@this, b) }
        def <=(b of Int8) { lessEqual(@this, b) }
    }
    
    # UByte
    value UInt8 native uint8_t {
        def **(b of UInt8) { pow(@this, b) }
        def //(b of UInt8) { root(@this, b) }
        def *(b of UInt8) { times(@this, b) }
        def /(b of UInt8) { div(@this, b) }
        def +(b of UInt8) { plus(@this, b) }
        def -(b of UInt8) { minus(@this, b) }
        def -() { negate(@this) }
        def &(b of UInt8) { bitAnd(@this, b) }
        def |(b of UInt8) { bitOr(@this, b) }
        def ^(b of UInt8) { bitXOr(@this, b) }
        def ~(b of UInt8) { bitNot(@this, b) }
        def >>(b of UInt8) { bitRight(@this, b) }
        def <<(b of UInt8) { bitLeft(@this, b) }
        def ==(b of UInt8) { equal(@this, b) }
        def !=(b of UInt8) { notEqual(@this, b) }
        def >(b of UInt8) { greater(@this, b) }
        def >=(b of UInt8) { greaterEqual(@this, b) }
        def <(b of UInt8) { less(@this, b) }
        def <=(b of UInt8) { lessEqual(@this, b) }
    }
    
    # Short
    value Int16 native int16_t {
        def **(b of Int16) { pow(@this, b) }
        def //(b of Int16) { root(@this, b) }
        def *(b of Int16) { times(@this, b) }
        def /(b of Int16) { div(@this, b) }
        def +(b of Int16) { plus(@this, b) }
        def -(b of Int16) { minus(@this, b) }
        def -() { negate(@this) }
        def &(b of Int16) { bitAnd(@this, b) }
        def |(b of Int16) { bitOr(@this, b) }
        def ^(b of Int16) { bitXOr(@this, b) }
        def ~(b of Int16) { bitNot(@this, b) }
        def >>(b of Int16) { bitRight(@this, b) }
        def <<(b of Int16) { bitLeft(@this, b) }
        def ==(b of Int16) { equal(@this, b) }
        def !=(b of Int16) { notEqual(@this, b) }
        def >(b of Int16) { greater(@this, b) }
        def >=(b of Int16) { greaterEqual(@this, b) }
        def <(b of Int16) { less(@this, b) }
        def <=(b of Int16) { lessEqual(@this, b) }
    }
    
    # UShort
    value UInt16 native uint16_t {
        def **(b of UInt16) { pow(@this, b) }
        def //(b of UInt16) { root(@this, b) }
        def *(b of UInt16) { times(@this, b) }
        def /(b of UInt16) { div(@this, b) }
        def +(b of UInt16) { plus(@this, b) }
        def -(b of UInt16) { minus(@this, b) }
        def -() { negate(@this) }
        def &(b of UInt16) { bitAnd(@this, b) }
        def |(b of UInt16) { bitOr(@this, b) }
        def ^(b of UInt16) { bitXOr(@this, b) }
        def ~(b of UInt16) { bitNot(@this, b) }
        def >>(b of UInt16) { bitRight(@this, b) }
        def <<(b of UInt16) { bitLeft(@this, b) }
        def ==(b of UInt16) { equal(@this, b) }
        def !=(b of UInt16) { notEqual(@this, b) }
        def >(b of UInt16) { greater(@this, b) }
        def >=(b of UInt16) { greaterEqual(@this, b) }
        def <(b of UInt16) { less(@this, b) }
        def <=(b of UInt16) { lessEqual(@this, b) }
    }
    
    # Int
    value Int32 native int32_t {
        def **(b of Int32) { pow(@this, b) }
        def //(b of Int32) { root(@this, b) }
        def *(b of Int32) { times(@this, b) }
        def /(b of Int32) { div(@this, b) }
        def +(b of Int32) { plus(@this, b) }
        def -(b of Int32) { minus(@this, b) }
        def -() { negate(@this) }
        def &(b of Int32) { bitAnd(@this, b) }
        def |(b of Int32) { bitOr(@this, b) }
        def ^(b of Int32) { bitXOr(@this, b) }
        def ~(b of Int32) { bitNot(@this, b) }
        def >>(b of Int32) { bitRight(@this, b) }
        def <<(b of Int32) { bitLeft(@this, b) }
        def ==(b of Int32) { equal(@this, b) }
        def !=(b of Int32) { notEqual(@this, b) }
        def >(b of Int32) { greater(@this, b) }
        def >=(b of Int32) { greaterEqual(@this, b) }
        def <(b of Int32) { less(@this, b) }
        def <=(b of Int32) { lessEqual(@this, b) }
    }
    
    # UInt
    value UInt32 native uint32_t {
        def **(b of UInt32) { pow(@this, b) }
        def //(b of UInt32) { root(@this, b) }
        def *(b of UInt32) { times(@this, b) }
        def /(b of UInt32) { div(@this, b) }
        def +(b of UInt32) { plus(@this, b) }
        def -(b of UInt32) { minus(@this, b) }
        def -() { negate(@this) }
        def &(b of UInt32) { bitAnd(@this, b) }
        def |(b of UInt32) { bitOr(@this, b) }
        def ^(b of UInt32) { bitXOr(@this, b) }
        def ~(b of UInt32) { bitNot(@this, b) }
        def >>(b of UInt32) { bitRight(@this, b) }
        def <<(b of UInt32) { bitLeft(@this, b) }
        def ==(b of UInt32) { equal(@this, b) }
        def !=(b of UInt32) { notEqual(@this, b) }
        def >(b of UInt32) { greater(@this, b) }
        def >=(b of UInt32) { greaterEqual(@this, b) }
        def <(b of UInt32) { less(@this, b) }
        def <=(b of UInt32) { lessEqual(@this, b) }
    }
    
    # Long
    value Int64 native int64_t {
        def **(b of Int64) { pow(@this, b) }
        def //(b of Int64) { root(@this, b) }
        def *(b of Int64) { times(@this, b) }
        def /(b of Int64) { div(@this, b) }
        def +(b of Int64) { plus(@this, b) }
        def -(b of Int64) { minus(@this, b) }
        def -() { negate(@this) }
        def &(b of Int64) { bitAnd(@this, b) }
        def |(b of Int64) { bitOr(@this, b) }
        def ^(b of Int64) { bitXOr(@this, b) }
        def ~(b of Int64) { bitNot(@this, b) }
        def >>(b of Int64) { bitRight(@this, b) }
        def <<(b of Int64) { bitLeft(@this, b) }
        def ==(b of Int64) { equal(@this, b) }
        def !=(b of Int64) { notEqual(@this, b) }
        def >(b of Int64) { greater(@this, b) }
        def >=(b of Int64) { greaterEqual(@this, b) }
        def <(b of Int64) { less(@this, b) }
        def <=(b of Int64) { lessEqual(@this, b) }
    }
    
    # ULong
    value UInt64 native uint64_t {
        def **(b of UInt64) { pow(@this, b) }
        def //(b of UInt64) { root(@this, b) }
        def *(b of UInt64) { times(@this, b) }
        def /(b of UInt64) { div(@this, b) }
        def +(b of UInt64) { plus(@this, b) }
        def -(b of UInt64) { minus(@this, b) }
        def -() { negate(@this) }
        def &(b of UInt64) { bitAnd(@this, b) }
        def |(b of UInt64) { bitOr(@this, b) }
        def ^(b of UInt64) { bitXOr(@this, b) }
        def ~(b of UInt64) { bitNot(@this, b) }
        def >>(b of UInt64) { bitRight(@this, b) }
        def <<(b of UInt64) { bitLeft(@this, b) }
        def ==(b of UInt64) { equal(@this, b) }
        def !=(b of UInt64) { notEqual(@this, b) }
        def >(b of UInt64) { greater(@this, b) }
        def >=(b of UInt64) { greaterEqual(@this, b) }
        def <(b of UInt64) { less(@this, b) }
        def <=(b of UInt64) { lessEqual(@this, b) }
    }
}
